
    set nocompatible
    set hidden          "/ Handle multiple buffers better.
                        "/ if hidden is not set, TextEdit might fail.

    set laststatus=2    "/ Show the status line all the time

    let DIR = getcwd()
    echom DIR

    "/ Use vim-plug as plugin system
    if !filereadable(DIR.'/dot-vim/autoload/plug.vim')
      echom 'executing curl...'
      silent !curl --insecure -fLo './dot-vim/autoload/plug.vim' --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
    endif


    call plug#begin(DIR.'/dot-vim/plugged')
      "/ vim-coc
      Plug 'neoclide/coc.nvim', {'branch': 'release'}

      "/ Typescript syntax
      Plug 'https://github.com/leafgarland/typescript-vim'

      "/ Flow syntax
      Plug 'https://github.com/flowtype/vim-flow'

      "/ Jsx syntax
      Plug 'neoclide/vim-jsx-improve'

      "/ Theme
      Plug 'ApolloTang/theme-vim--snow'
    call plug#end()


    syntax enable     " Turn on syntax highlighting.

    if has("gui_running")
      if has("gui_macvim")
        echom 'is macvim'
        colorscheme snow
        set guifont=Inconsolata:h14
      endif
    endif


  "/ Use configuration file in sandbox.
  let g:coc_config_home = DIR.'/coc_config_home'
  echom g:coc_config_home
  let g:coc_data_home = DIR.'/coc_data_home'
  echom g:coc_data_home


  "/ Some servers have issues with backup files,
  "/ see https://github.com/neoclide/coc.nvim/issues/649
    set nobackup
    set nowritebackup

  "/ Better display for messages
  set cmdheight=2



"/ **
"/ **
"/ ** [plugconfig coc]
"/ **
"/ **
"/ ** ---------------------------------
  "/ You will have bad experience for diagnostic messages when it's default 4000.
  set updatetime=300

  "/ don't give |ins-completion-menu| messages.
  "set shortmess+=c
  "/ This setting is no longer present on neoclide/coc.nvim README. So
  "/ I am not sure if 'shortmess+=c' is still required, turn off for now.

  "/ Always show the signcolumn, otherwise it would shift the text each time
  "/ diagnostics appear/become resolved.
  " if has("patch-8.1.1564")
  "   " Recently vim can merge signcolumn and number column into one
  "   set signcolumn=number
  " else
  "   set signcolumn=yes
  " endif
  "/
  "/ Recently vim can merge signcolumn and number column into one
  "/ but I don't want to merge b/c I want to see both signcolum and number
  set signcolumn=yes
  "/


  "/ Use <tab> and <S-tab> to navigate completion list:
  "/ NOTE:
  "/   Use command ':verbose imap <tab>' to make sure tab is not re-mapped by
  "/   other plugin otherwise the following will not work.
    inoremap <silent><expr> <TAB>
          \ coc#pum#visible() ? coc#pum#next(1):
          \ <SID>CheckBackSpace() ? "\<TAB>" :
          \ coc#refresh()
    inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<S-TAB>"

      function! CheckBackSpace() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
      endfunction


  "/ Use <c-space> to trigger completion. This is same as vscode's Ctrl+Space.
    if has('nvim')
      inoremap <silent><expr> <c-space> coc#refresh()
    elseif has("gui_macvim")
      inoremap <silent><expr> <c-space> coc#refresh()
      "/ My alternative mapping:
      inoremap <silent><expr> <C-o><space> coc#refresh()
      "/ (I can't remember why I the above alternate mapping; I will consider remove it in the future)
    else
      "/ Vim in terminal pressing 'Ctrl+space' is triggering  <c-@> instead of <c-space>
      "/ see: https://github.com/neoclide/coc.nvim/issues/2176
      inoremap <silent><expr> <c-@> coc#refresh()
    endif

  "/ Make <CR> auto-select the first completion item and notify coc.nvim to format on enter.
  "/ NOTE:
  "/   Use command ':verbose imap <CR>' to make sure character return is not re-mapped by
  "/   other plugin otherwise the following will not work.
    inoremap <silent><expr> <CR>
          \ coc#pum#visible() ? coc#_select_confirm():
          \ "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"


  "/ Use <CR> to confirm completion
  "/ NOTE:
  "/   Use command ':verbose imap <CR>' to make sure character return is not re-mapped by
  "/   other plugin otherwise the following will not work.
    inoremap <expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"


  "/ Colors in completion dropdown:
    hi CocSearch ctermfg=12 guifg=#f80409    "/ fg for matched highlight
    hi CocMenuSel ctermbg=109 guibg=#ffe4bd  "/ bg of current selection


  "/ Use `[g` and `]g` to navigate diagnostics
  "/ Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
  nmap <silent> [g <Plug>(coc-diagnostic-prev)
  nmap <silent> ]g <Plug>(coc-diagnostic-next)

  " GoTo code navigation.
  nmap <silent> gd <Plug>(coc-definition)
  nmap <silent> gy <Plug>(coc-type-definition)
  nmap <silent> gi <Plug>(coc-implementation)
  nmap <silent> gr <Plug>(coc-references)


  "/ ##
  "/ ## Trigger function signature help like vscode's Cmd+Shift+Space
  "/ ##
  "/ To do this this, place cursor in the function parenthesis, switch to insert
  "/ mode and press <c-p> ( see: https://github.com/neoclide/coc.nvim/issues/2202#issuecomment-662969193 )
  "inoremap <C-P> <C-\><C-O>:call CocActionAsync('showSignatureHelp') <cr>
  "/
  "/ The mapping above is commented out b/c it overwritten dropdown-navigation-up in completion,
  "/ ( see: https://medium.com/usevim/vim-101-completion-compendium-97b4ebc3a45a )
  "/ The folloing is a better mapping (from: https://github.com/neoclide/coc.nvim/issues/2656#issuecomment-845903417 )
  inoremap <silent> <space>s <C-r>=CocActionAsync('showSignatureHelp')<CR>


  " Use K to show documentation in preview window.
  nnoremap <silent> K :call <SID>show_documentation()<CR>

  function! s:show_documentation()
    if (index(['vim','help'], &filetype) >= 0)
      execute 'h '.expand('<cword>')
    elseif (coc#rpc#ready())
      call CocActionAsync('doHover')
    else
      execute '!' . &keywordprg . " " . expand('<cword>')
    endif
  endfunction

  " Highlight symbol under cursor on CursorHold
  autocmd CursorHold * silent call CocActionAsync('highlight')

  " Symbol renaming.
  nmap <leader>rn <Plug>(coc-rename)

  " Remap for format selected region
  xmap <leader>f  <Plug>(coc-format-selected)
  nmap <leader>f  <Plug>(coc-format-selected)

  augroup mygroup
    autocmd!
    " Setup formatexpr specified filetype(s).
    autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
    " Update signature help on jump placeholder
    autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
  augroup end

  " Remap for do codeAction of selected region, ex: `<leader>aap` for current paragraph
  xmap <leader>a  <Plug>(coc-codeaction-selected)
  nmap <leader>a  <Plug>(coc-codeaction-selected)

  "/ Remap for do codeAction of current line
    "nmap <leader>ac  <Plug>(coc-codeaction)
    nmap <space>ac  <Plug>(coc-codeaction)
  "/ Fix autofix problem of current line
    "nmap <leader>qf  <Plug>(coc-fix-current)
    nmap <space>qf  <Plug>(coc-fix-current)

  " Use <tab> for select selections ranges, needs server support, like: coc-tsserver, coc-python
  nmap <silent> <TAB> <Plug>(coc-range-select)
  xmap <silent> <TAB> <Plug>(coc-range-select)
  xmap <silent> <S-TAB> <Plug>(coc-range-select-backword)

  " Use `:GGCFormatCurrentBuffer` to format current buffer
  command! -nargs=0 GGCFormatCurrentBuffer :call CocAction('format')

  " Use `:GGCfoldCurrentBuffer` to fold current buffer
  command! -nargs=? GGCfoldCurrentBuffer :call CocAction('fold', <f-args>)

  " use `:GGCorganizeImport` for organize import of current buffer
  command! -nargs=0 GGCorganizeImport :call CocAction('runCommand', 'editor.action.organizeImport')

  " Add diagnostic info for https://github.com/itchyny/lightline.vim
  let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'cocstatus', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'cocstatus': 'coc#status'
        \ },
        \ }



  " Using CocList
  " Show all diagnostics
  nnoremap <silent> <space>a  :<C-u>CocList diagnostics<cr>
  " Manage extensions
  nnoremap <silent> <space>e  :<C-u>CocList extensions<cr>
  " Show commands
  nnoremap <silent> <space>c  :<C-u>CocList commands<cr>
  " Find symbol of current document
  nnoremap <silent> <space>o  :<C-u>CocList outline<cr>
  " Search workspace symbols
  nnoremap <silent> <space>s  :<C-u>CocList -I symbols<cr>
  " Do default action for next item.
  nnoremap <silent> <space>j  :<C-u>CocNext<CR>
  " Do default action for previous item.
  nnoremap <silent> <space>k  :<C-u>CocPrev<CR>
  " Resume latest coc list
  nnoremap <silent> <space>p  :<C-u>CocListResume<CR>



  "/ Coc Style
  hi CocErrorHighlight       cterm=underline gui=undercurl guisp=red     ctermfg=red
  hi CocWarningHighlight     cterm=underline gui=undercurl guisp=orange  ctermfg=3
  hi CocInfoHighlight        cterm=underline gui=undercurl guisp=#bbbff5 ctermfg=blue
  hi CocHintHighlight        cterm=underline gui=undercurl guisp=green   ctermfg=green

  hi CocErrorsign            ctermfg=red   guifg=red
  hi CocWarningsign          ctermfg=3     guifg=orange
  hi CocInfoSign             ctermfg=blue  guifg=#2300b1
  hi CocHintSign             ctermfg=darkcyan guifg=darkcyan
  "/ More highlight set in plugin/coc.vim

"/ ** ---------------------------------
"/ ** [plugconfig coc END]
